services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    extra_hosts:                                                                
      - "host.docker.internal:host-gateway" 

  cassandra:
    image: cassandra:latest
    environment:
      - EXTRA_JVM_OPTS=-javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=7070:/etc/jmx/cassandra-jmx.yaml
    volumes:
      - ./prometheus-jmx/jmx_prometheus_javaagent.jar:/opt/jmx/jmx_prometheus_javaagent.jar:ro
      - ./prometheus-jmx/cassandra-jmx.yaml:/etc/jmx/cassandra-jmx.yaml:ro
    ports:
      - "9042:9042"   # CQL
      - "7070:7070"
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "DESC KEYSPACES"]
      interval: 10s
      timeout: 10s
      retries: 10

  cassandra-init:
    image: cassandra:latest
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    volumes:
      - ./init.cql:/docker-entrypoint-initdb.d/init.cql:ro
    entrypoint: >
      sh -c "cqlsh cassandra -f /docker-entrypoint-initdb.d/init.cql"
    restart: "no"

  prometheus:
    image: docker.io/prom/prometheus:v3.3.0
    container_name: prometheus
    ports:
      - "9090:9090"
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped

  grafana:
    image: docker.io/grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
  
  cassandra-exporter:
    build:
      context: ./exporter
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    environment:
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_PORT=9042
      - POLL_INTERVAL=30
      - EXPORTER_PORT=9123
    ports:
      - "9123:9123"


  sales_producer:
    build: ./sales
    depends_on:
      cassandra-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    restart: 'always'
    environment:
      - ROLE=sales_producer


  sales_consumer:
    build: ./sales
    depends_on:
      cassandra-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    restart: 'always'
    environment:
      - ROLE=sales_consumer
    healthcheck:
      test: ["CMD", "python", "health_check.py"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s 

  inventory_producer:
    build: ./inventory
    depends_on:
      cassandra-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    restart: 'always'
    environment:
      - ROLE=inventory_producer


  inventory_consumer:
    build: ./inventory
    depends_on:
      cassandra-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    restart: 'always'
    environment:
      - ROLE=inventory_consumer
  
  spark-master:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=master
    ports:            
      - "8080:8080"   
      - "7077:7077"  
    depends_on:
      kafka:
        condition: service_healthy
      sales_consumer:
        condition: service_healthy

  spark-worker:
    image: bitnami/spark:latest
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=2
    ports:
      - "8081:8081"  
    extra_hosts:                                                                
      - "host.docker.internal:host-gateway" 

  pushgateway:
    image: prom/pushgateway:latest
    restart: unless-stopped
    ports:
      - "9091:9091"

  spark_job:
    build: ./spark
    depends_on:
      - spark-master
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - PUSHGATEWAY=pushgateway:9091
    extra_hosts:                                                                
      - "host.docker.internal:host-gateway"


volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
