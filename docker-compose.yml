version: '3'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka for message streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # KSQLDB for stream processing
  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: ksqldb_service

  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ecommerce-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Cassandra for microservices databases
  cassandra:
    image: cassandra:latest
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=ecommerce_cluster
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 10

  # Hazelcast for distributed caching
  hazelcast:
    image: hazelcast/hazelcast:latest
    ports:
      - "5701:5701"

  # Common code container to share code between services
  common:
    build:
      context: .
      dockerfile: ./common/Dockerfile
    volumes:
      - common_code:/app/common

  # Microservices
  user-service:
    build:
      context: .
      dockerfile: ./microservices/user_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      hazelcast:
        condition: service_started
      common:
        condition: service_completed_successfully
    volumes:
      - common_code:/app/common
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      CASSANDRA_CONTACT_POINTS: cassandra
      HAZELCAST_HOST: hazelcast
    restart: on-failure

  sales-service:
    build:
      context: .
      dockerfile: ./microservices/sales_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      hazelcast:
        condition: service_started
      common:
        condition: service_completed_successfully
    volumes:
      - common_code:/app/common
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      CASSANDRA_CONTACT_POINTS: cassandra
      HAZELCAST_HOST: hazelcast
    restart: on-failure

  inventory-service:
    build:
      context: .
      dockerfile: ./microservices/inventory_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      hazelcast:
        condition: service_started
      common:
        condition: service_completed_successfully
    volumes:
      - common_code:/app/common
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      CASSANDRA_CONTACT_POINTS: cassandra
      HAZELCAST_HOST: hazelcast
    restart: on-failure

  # Data generators
  data-generator:
    build:
      context: .
      dockerfile: ./data_generators/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      common:
        condition: service_completed_successfully
    volumes:
      - common_code:/app/common
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    restart: on-failure

volumes:
  cassandra_data:
  common_code: